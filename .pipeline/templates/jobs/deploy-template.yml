parameters:
  - name: resourceGroupName
  - name: location
  - name: subscriptionID
    type: string
  - name: workingDir
    type: string
  - name: templateFile
  - name: deployOperation
    type: string
    default: 'create'
  - name: parameterArray
    type: object
    default: []
  - name: jobName
    default: Deploy_Bicep_Main_Module
  - name: dependsOnJob
    type: string
    default: ''
  - name: preDeploySteps
    type: stepList
    default: []
  - name: postDeploySteps
    type: stepList
    default: []
  - name: variableOverrides
    type: object
    default: {}

jobs:
  - job: ${{ parameters.jobName }}
    dependsOn: ${{ parameters.dependsOnJob}}
    displayName: Deploy ${{ parameters.templateFile }}
    variables:
      ${{ insert }}: ${{ parameters.variableOverrides }}

    steps:
      - ${{ parameters.preDeploySteps }}
      - task: PowerShell@2
        name: Convert_paramater_array
        inputs:
          targetType: 'inline'
          script: |
            $myArray = ConvertFrom-Json $Env:PARAMETER_ARRAY 
            # Need to add depth for embedded json arrays. 
            $jsonmyArray = $myArray | ConvertTo-Json -Compress -Depth 100
            Write-Host "json_my_Array is: $jsonmyArray" 
             # Converting into json into hash array to extract the string array 
            $hasharray=@{}
              $jsonObjmyArray= ConvertFrom-Json $jsonmyArray 
              foreach ( $property in $jsonObjmyArray.PSObject.Properties ) {
                $hasharray[$property.Name]=$property.Value
              }
              # Getting values from the hash array into string array
            $stringmyArray=@()
              foreach ($parameter in $hasharray.SyncRoot) {
                $stringmyArray += $parameter
              }
              Write-Host "Here is our string array: $stringmyArray"
              # Formatting for the bicep deployment 
            $stringparameterArray=@()
             foreach ( $string in $stringmyArray) {
               $string1 = $string -replace ' ', '=' 
               $stringparameterArray += $string1
             }
              Write-Host "Here is final format of parameters for deployment with Bicep"
              $stringparameterArray
              $stringparameters=[string]::Join(" ", $stringparameterArray)
              $stringparameters
              Write-Host "##vso[task.setvariable variable=bicep_parameters]$stringparameters"
        env: 
          PARAMETER_ARRAY: ${{convertToJson(parameters.parameterArray)}}

      - task: AzureCLI@2
        name: Deploy_Bicep_Template
        inputs: 
          azureSubscription: $(serviceConnection)
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: | 
               $(var-bashPreInjectScript)
                echo "Deploying ${{ parameters.templateFile }} using ${{ parameters.deployOperation}} operation..."
                az group deployment ${{ parameters.deployOperation }} \
                --name ${{ parameters.jobName }}-$(Build.BuildNumber) \
                --resource-group ${{ parameters.resourceGroupName }} \
                --template-file ${{ parameters.templateFile}} \
                --parameters $(bicep_parameters)

                echo "Grab the outputs from the deployment"
                deploymentoutputs=$(az deployment group show --resource-group '${{ parameters.resourceGroupName }}' --name '${{ parameters.jobName }}-$(Build.BuildNumber)' \
                  --query properties.outputs)

               echo 'convert outputs to variables'
                echo $deploymentoutputs | jq -c '. | to_entries[] | [.key, .value.value]' |
                    while IFS=$"\n" read -r c; do
                      outputname=$(echo "$c" | jq -r '.[0]')
                      outputvalue=$(echo "$c" | jq -r '.[1]')
                      echo "setting variable RGDO_$outputname=$outputvalue"
                      echo "##vso[task.setvariable variable=RGDO_$outputname;isOutput=true]$outputvalue"
                    done
